{"version":3,"sources":["webpack://grapesjs-blockly/webpack/universalModuleDefinition","webpack://grapesjs-blockly/webpack/bootstrap","webpack://grapesjs-blockly/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://grapesjs-blockly/./src/utils/bi_blockly/blocks/bi_blockly.js","webpack://grapesjs-blockly/./src/utils/bi_blockly/generators/javascript/bi_blockly.js","webpack://grapesjs-blockly/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://grapesjs-blockly/./node_modules/@babel/runtime/helpers/createClass.js","webpack://grapesjs-blockly/./src/consts.js","webpack://grapesjs-blockly/./src/blocklyEditor.js","webpack://grapesjs-blockly/./src/commands.js","webpack://grapesjs-blockly/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","configurable","writable","Blockly","Blocks","init","this","appendDummyInput","appendField","setInputsInline","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","appendValueInput","setCheck","FieldTextInput","setOutput","OPERATORS","Msg","MATH_ADDITION_SYMBOL","MATH_SUBTRACTION_SYMBOL","MATH_MULTIPLICATION_SYMBOL","MATH_DIVISION_SYMBOL","MATH_POWER_SYMBOL","MATH_ARITHMETIC_HELPURL","FieldDropdown","thisBlock","getFieldValue","MATH_ARITHMETIC_TOOLTIP_ADD","MATH_ARITHMETIC_TOOLTIP_MINUS","MATH_ARITHMETIC_TOOLTIP_MULTIPLY","MATH_ARITHMETIC_TOOLTIP_DIVIDE","MATH_ARITHMETIC_TOOLTIP_POWER","RTL","LOGIC_COMPARE_HELPURL","op","LOGIC_COMPARE_TOOLTIP_EQ","LOGIC_COMPARE_TOOLTIP_NEQ","LOGIC_COMPARE_TOOLTIP_LT","LOGIC_COMPARE_TOOLTIP_LTE","LOGIC_COMPARE_TOOLTIP_GT","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","LOGIC_OPERATION_AND","LOGIC_OPERATION_OR","LOGIC_OPERATION_HELPURL","LOGIC_OPERATION_TOOLTIP_AND","LOGIC_OPERATION_TOOLTIP_OR","appendStatementInput","FieldCheckbox","FieldVariable","appendAddSubStatement","itemCount_","JavaScript","block","value_left","valueToCode","ORDER_ATOMIC","value_right","tuple","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_COMMA","operator","order","argument0","argument1","ORDER_FUNCTION_CALL","ORDER_EQUALITY","ORDER_RELATIONAL","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","defaultArgument","statement_try","statementToCode","statement_catch","statement_finally","value_yield","code","codeArr","Array","value_from","join","variableDB_","getName","Variables","NAME_TYPE","Generator","STATEMENT_PREFIX","statement_init","value_test","statement_update","statement_chain","replace","trim","value_switch","statement_default","value_chain","chain","text_name","value_function","var_type","text_var","value_val","text_extends","value_index","value_expression","text_operator","toLowerCase","toUpperCase","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","protoProps","staticProps","cmdId","BlocklyEditor","div","opts","toolbox","toolboxPush","workspace","inject","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","grid","spacing","color","snap","trashcan","workspaceOptions","editor","cm","Commands","md","Modal","domc","Components","modalTitle","codeViewOptions","commandBlocklyScript","blocklyOptions","blocklyTypesSupport","toolbarIcon","onRun","onError","starter","blocklyEditor","content","appendToContent","HTMLElement","appendChild","insertAdjacentHTML","forEach","type","typeOpt","getType","model","addType","initToolbar","apply","arguments","tb","tbExists","some","item","command","unshift","label","toolbarBtnBlockly","set","add","keyBlocklyXml","run","sender","options","getSelected","showCustomCode","stop","clear","close","title","getContent","getScriptString","open","getModel","once","stopCommand","id","querySelector","addChangeListener","updateWorkspace","xml","Xml","domToWorkspace","textToDom","getPreContent","getPostContent","postContent","document","createElement","codeViewer","getCodeViewer","refresh","setTimeout","focus","getElement","blocklyCont","innerHTML","pfx","getConfig","className","getContentActions","actions","style","btn","buttonLabel","onclick","handleSave","runLogic","runCode","workspaceToDom","domToText","CodeManager","createViewer","codeName","theme","readOnly","autoBeautify","toggleCodeViewer","blocklyStyle","codeViewerStyle","height","display","e","blockly_code","workspaceToCode","mainWorkspace","setContent","sync","Function","err","console","log","Error","biBlocks","biBlocksJS","commands"],"mappings":"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","file":"grapesjs-blockly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-blockly\"] = factory();\n\telse\n\t\troot[\"grapesjs-blockly\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","// BlocksIDE is a project to create a complete js Blocks Development Platform\r\n//\r\n// Copyright 2016 Juan Carlos Orozco\r\n//\r\n// BlocksIDE was written by Juan Carlos Orozco and released under an Apache version 2 license.\r\n//\r\n// Git repositories for BlocksIDE are available at\r\n//\r\n// https://github.com/JC-Orozco/BlocksIDE\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the 'License');\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an 'AS IS' BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nmodule.exports = function (Blockly) {\r\n  //var goog = Blockly.goog;\r\n  'use strict';\r\n\r\n  //goog.provide('Blockly.Blocks.mm');\r\n\r\n  //goog.require('Blockly.Blocks');\r\n\r\n  // TODO: JCOA Add drop down list with operator options\r\n  Blockly.Blocks['bi_comment'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('comment');\r\n      this.setInputsInline(true);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(90);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  // TODO: JCOA Add drop down list with operator options\r\n  Blockly.Blocks['bi_assignment'] = {\r\n    init: function () {\r\n      this.appendValueInput('A')\r\n        .setCheck(null)\r\n        .appendField('');\r\n      this.appendValueInput('B')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('='), 'OP');\r\n      this.setInputsInline(true);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  // TODO: JCOA Add drop down list with operator options\r\n  Blockly.Blocks['bi_assignment_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('A')\r\n        .setCheck(null)\r\n        .appendField('');\r\n      this.appendValueInput('B')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('='), 'OP');\r\n      this.setInputsInline(true);\r\n      this.setOutput(true);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_math_arithmetic'] = {\r\n    /**\r\n     * Block for basic arithmetic operator.\r\n     * @this Blockly.Block\r\n     */\r\n    init: function () {\r\n      var OPERATORS = [\r\n        [Blockly.Msg.MATH_ADDITION_SYMBOL, 'ADD'],\r\n        [Blockly.Msg.MATH_SUBTRACTION_SYMBOL, 'MINUS'],\r\n        [Blockly.Msg.MATH_MULTIPLICATION_SYMBOL, 'MULTIPLY'],\r\n        [Blockly.Msg.MATH_DIVISION_SYMBOL, 'DIVIDE'],\r\n        [Blockly.Msg.MATH_POWER_SYMBOL, 'POWER']\r\n      ];\r\n      this.setHelpUrl(Blockly.Msg.MATH_ARITHMETIC_HELPURL);\r\n      this.setColour(270);\r\n      this.setOutput(true, 'Number');\r\n      this.appendValueInput('A')\r\n        .setCheck(null); // .setCheck('Number');\r\n      this.appendValueInput('B')\r\n        .setCheck(null) // .setCheck('Number')\r\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\r\n      this.setInputsInline(true);\r\n      // Assign 'this' to a variable for use in the tooltip closure below.\r\n      var thisBlock = this;\r\n      this.setTooltip(function () {\r\n        var mode = thisBlock.getFieldValue('OP');\r\n        var TOOLTIPS = {\r\n          'ADD': Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD,\r\n          'MINUS': Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS,\r\n          'MULTIPLY': Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY,\r\n          'DIVIDE': Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE,\r\n          'POWER': Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER\r\n        };\r\n        return TOOLTIPS[mode];\r\n      });\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_logic_compare'] = {\r\n    /**\r\n     * Block for comparison operator.\r\n     * @this Blockly.Block\r\n     */\r\n    init: function () {\r\n      var OPERATORS = this.RTL ? [\r\n        ['=', 'EQ'],\r\n        ['\\u2260', 'NEQ'],\r\n        ['>', 'LT'],\r\n        ['\\u2265', 'LTE'],\r\n        ['<', 'GT'],\r\n        ['\\u2264', 'GTE']\r\n      ] : [\r\n        ['=', 'EQ'],\r\n        ['\\u2260', 'NEQ'],\r\n        ['<', 'LT'],\r\n        ['\\u2264', 'LTE'],\r\n        ['>', 'GT'],\r\n        ['\\u2265', 'GTE']\r\n      ];\r\n      this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\r\n      this.setColour(190);\r\n      this.setOutput(true, 'Boolean');\r\n      this.appendValueInput('A');\r\n      this.appendValueInput('B')\r\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\r\n      this.setInputsInline(true);\r\n      // Assign 'this' to a variable for use in the tooltip closure below.\r\n      var thisBlock = this;\r\n      this.setTooltip(function () {\r\n        var op = thisBlock.getFieldValue('OP');\r\n        var TOOLTIPS = {\r\n          'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\r\n          'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\r\n          'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\r\n          'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\r\n          'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\r\n          'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\r\n        };\r\n        return TOOLTIPS[op];\r\n      });\r\n      this.prevBlocks_ = [null, null];\r\n    },\r\n    /**\r\n     * Called whenever anything on the workspace changes.\r\n     * Prevent mismatched types from being compared.\r\n     * @param {!Blockly.Events.Abstract} e Change event.\r\n     * @this Blockly.Block\r\n     */\r\n    //  onchange: function(e) {\r\n    //    var blockA = this.getInputTargetBlock('A');\r\n    //    var blockB = this.getInputTargetBlock('B');\r\n    //    // Disconnect blocks that existed prior to this change if they don't match.\r\n    //    if (blockA && blockB &&\r\n    //        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\r\n    //      // Mismatch between two inputs.  Disconnect previous and bump it away.\r\n    //      // Ensure that any disconnections are grouped with the causing event.\r\n    //      Blockly.Events.setGroup(e.group);\r\n    //      for (var i = 0; i < this.prevBlocks_.length; i++) {\r\n    //        var block = this.prevBlocks_[i];\r\n    //        if (block === blockA || block === blockB) {\r\n    //          block.unplug();\r\n    //          block.bumpNeighbours_();\r\n    //        }\r\n    //      }\r\n    //      Blockly.Events.setGroup(false);\r\n    //    }\r\n    //    this.prevBlocks_[0] = blockA;\r\n    //    this.prevBlocks_[1] = blockB;\r\n    //  }\r\n  };\r\n\r\n\r\n\r\n  Blockly.Blocks['bi_logic_operation'] = {\r\n    /**\r\n     * Block for logical operations: 'and', 'or'.\r\n     * @this Blockly.Block\r\n     */\r\n    init: function () {\r\n      var OPERATORS = [\r\n        [Blockly.Msg.LOGIC_OPERATION_AND, 'AND'],\r\n        [Blockly.Msg.LOGIC_OPERATION_OR, 'OR']\r\n      ];\r\n      this.setHelpUrl(Blockly.Msg.LOGIC_OPERATION_HELPURL);\r\n      this.setColour(190);\r\n      this.setOutput(true, 'Boolean');\r\n      this.appendValueInput('A');\r\n      //.setCheck('Boolean');\r\n      this.appendValueInput('B')\r\n        //.setCheck('Boolean')\r\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\r\n      this.setInputsInline(true);\r\n      // Assign 'this' to a variable for use in the tooltip closure below.\r\n      var thisBlock = this;\r\n      this.setTooltip(function () {\r\n        var op = thisBlock.getFieldValue('OP');\r\n        var TOOLTIPS = {\r\n          'AND': Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND,\r\n          'OR': Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR\r\n        };\r\n        return TOOLTIPS[op];\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  Blockly.Blocks['bi_try_catch'] = {\r\n    init: function () {\r\n      this.appendStatementInput('try')\r\n        .setCheck(null)\r\n        .appendField('try');\r\n      this.appendStatementInput('catch')\r\n        .setCheck(null)\r\n        .appendField('catch')\r\n        .appendField(new Blockly.FieldTextInput(''), 'parameter');\r\n      this.appendStatementInput('finally')\r\n        .setCheck(null)\r\n        .appendField('finally');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(90);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_catch'] = {\r\n    init: function () {\r\n      this.appendStatementInput('catch')\r\n        .setCheck(null)\r\n        .appendField('catch')\r\n        .appendField(new Blockly.FieldTextInput(''), 'parameter');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(90);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_throw'] = {\r\n    init: function () {\r\n      this.appendValueInput('throw')\r\n        .setCheck(null)\r\n        .appendField('throw');\r\n      // this.setOutput(true);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(120);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_yield'] = {\r\n    init: function () {\r\n      this.appendValueInput('yield')\r\n        .setCheck(null)\r\n        .appendField('yield')\r\n        .appendField(new Blockly.FieldCheckbox('FALSE'), 'delegate');\r\n      //this.setOutput(true);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(120);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_yield_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('yield')\r\n        .setCheck(null)\r\n        .appendField('yield')\r\n        .appendField(new Blockly.FieldCheckbox('FALSE'), 'delegate');\r\n      this.setOutput(true);\r\n      //    this.setPreviousStatement(true, null);\r\n      //    this.setNextStatement(true, null);\r\n      this.setColour(120);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_code_part'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('Code part')\r\n        .appendField(new Blockly.FieldTextInput(''), 'code');\r\n      this.setOutput(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_code_line'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('Code line')\r\n        .appendField(new Blockly.FieldTextInput(''), 'code');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_access_field'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('set')\r\n        .appendField(new Blockly.FieldVariable('item'), 'variable');\r\n      this.appendDummyInput()\r\n        .appendField('.')\r\n        .appendField(new Blockly.FieldTextInput(''), 'field');\r\n      this.appendValueInput('input')\r\n        .appendField('to');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setInputsInline(true);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_set_to'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('set')\r\n        .appendField(new Blockly.FieldTextInput(''), 'code');\r\n      this.appendValueInput('input')\r\n        .appendField('to');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setInputsInline(true);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_for'] = {\r\n    init: function () {\r\n      //    this.appendDummyInput()\r\n      //        .appendField('for');\r\n      this.appendStatementInput('init')\r\n        .appendField('for init');\r\n      this.appendValueInput('test')\r\n        .appendField('test');\r\n      this.appendStatementInput('update')\r\n        .appendField('update');\r\n      this.appendStatementInput('chain')\r\n        .appendField('loop')\r\n        .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setInputsInline(true);\r\n      this.setColour(120);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  // Generate a let (variable name) instruction on the js generator.\r\n  Blockly.Blocks['bi_for_in'] = {\r\n    init: function () {\r\n      this.appendValueInput('array')\r\n        .appendField('for')\r\n        .appendField(new Blockly.FieldTextInput('i'), 'var')\r\n        .appendField('in');\r\n      this.appendStatementInput('chain')\r\n        .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setInputsInline(true);\r\n      this.setColour(120);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_continue'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('continue');\r\n      this.setHelpUrl('http://www.example.com/');\r\n      this.setColour(120);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setTooltip('');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_break'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('break');\r\n      this.setHelpUrl('http://www.example.com/');\r\n      this.setColour(120);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setTooltip('');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_s1'] = {\r\n    /**\r\n     * Block for creating a list with any number of elements of any type.\r\n     * @this Blockly.Block\r\n     */\r\n    init: function () {\r\n      this.setHelpUrl('http://www.example.com/');\r\n      this.setColour(290);\r\n      this.appendAddSubStatement('for init', 'items',\r\n        null,\r\n        '');\r\n      this.appendValueInput('test')\r\n        .appendField('test')\r\n        .setCheck(null);\r\n      this.itemCount_ = 1;\r\n      //this.updateShape_();\r\n      this.setInputsInline(false);\r\n      this.setPreviousStatement(true, null); // 'Method');\r\n      this.setNextStatement(true, null); // 'Method');\r\n      //this.setOutput(true, 'Array');\r\n      this.setTooltip('');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('ret')\r\n        .setCheck(null)\r\n        .appendField('return')\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(290);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_var'] = {\r\n    init: function () {\r\n      this.appendValueInput('val')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['var', 'var'],\r\n          ['let', 'let'],\r\n          ['const', 'const']\r\n        ]), 'var_type')\r\n        .appendField(new Blockly.FieldTextInput('var1'), 'var');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_var_name'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('')\r\n        .appendField(new Blockly.FieldTextInput('var1'), 'NAME');\r\n      this.setOutput(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_new'] = {\r\n    init: function () {\r\n      this.appendValueInput('chain')\r\n        .appendField('new')\r\n        .setCheck(null);\r\n      //this.setPreviousStatement(true, null);\r\n      this.setOutput(true, null);\r\n      this.setColour(55);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_anonymous_class'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('class')\r\n        .appendField(new Blockly.FieldTextInput(''), 'NAME');\r\n      this.appendDummyInput()\r\n        .appendField('extends')\r\n        .appendField(new Blockly.FieldTextInput(''), 'extends');\r\n      this.appendStatementInput('chain')\r\n        .setCheck(null);\r\n      this.setHelpUrl('http://www.example.com/');\r\n      this.setColour(55);\r\n      //this.setPreviousStatement(true, null);\r\n      //this.setNextStatement(true, null);\r\n      this.setOutput(true, null);\r\n      this.setTooltip('');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_class'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('class')\r\n        .appendField(new Blockly.FieldTextInput('Name'), 'NAME');\r\n      this.appendDummyInput()\r\n        .appendField('extends')\r\n        .appendField(new Blockly.FieldTextInput(''), 'extends');\r\n      this.appendStatementInput('chain')\r\n        .setCheck(null);\r\n      this.setHelpUrl('http://www.example.com/');\r\n      this.setColour(55);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setOutput(true, null);\r\n      this.setTooltip('');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_static'] = {\r\n    init: function () {\r\n      this.appendStatementInput('static')\r\n        .setCheck(null)\r\n        .appendField('static');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(55);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_get'] = {\r\n    init: function () {\r\n      this.appendStatementInput('get')\r\n        .setCheck(null)\r\n        .appendField('get');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(55);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_set'] = {\r\n    init: function () {\r\n      this.appendStatementInput('set')\r\n        .setCheck(null)\r\n        .appendField('set');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(55);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_field'] = {\r\n    init: function () {\r\n      this.appendValueInput('chain')\r\n        .appendField(new Blockly.FieldTextInput('field1'), 'NAME')\r\n        .setCheck(null); // (['Field','Method']);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_field_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('chain')\r\n        .appendField('')\r\n        .appendField(new Blockly.FieldTextInput('field1'), 'NAME')\r\n        .setCheck(null); // (['Field','Method']);\r\n      this.setOutput(true, null); // 'Field');\r\n      //this.setPreviousStatement(true, 'Field');\r\n      this.setColour(330);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_string_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('chain')\r\n        .appendField('\"')\r\n        .appendField(new Blockly.FieldTextInput(''), 'NAME')\r\n        .appendField('\"')\r\n        .setCheck(null); // (['Field','Method']);\r\n      this.setOutput(true, null); // 'Field');\r\n      //this.setPreviousStatement(true, 'Field');\r\n      this.setColour(160);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_index'] = {\r\n    init: function () {\r\n      this.appendValueInput('index')\r\n        .appendField('[')\r\n        .setCheck(null); // (['Field','Method']);\r\n      this.appendValueInput('chain')\r\n        .appendField(']')\r\n        .setCheck(null); // (['Field','Method']);\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, null); // 'Field');\r\n      //this.setPreviousStatement(true, 'Field');\r\n      this.setColour(260);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_adaptor'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('');\r\n      this.appendStatementInput('chain')\r\n        .setCheck(null);\r\n      //this.setPreviousStatement(true, null);\r\n      this.setOutput(true, null);\r\n      this.setColour(55);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_statement'] = {\r\n    init: function () {\r\n      this.appendDummyInput()\r\n        .appendField('');\r\n      this.appendStatementInput('chain')\r\n        .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setOutput(true, null);\r\n      this.setColour(290);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  // TODO: JCOA Make a drop down list of unary operators\r\n  Blockly.Blocks['bi_unary'] = {\r\n    init: function () {\r\n      this.appendValueInput('expression')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('++'), 'operator');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setOutput(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_unary_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('expression')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('++'), 'operator');\r\n      //    this.setPreviousStatement(true, null);\r\n      //    this.setNextStatement(true, null);\r\n      this.setOutput(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  // TODO: JCOA Make a drop down list of unary operators\r\n  Blockly.Blocks['bi_unary_postfix'] = {\r\n    init: function () {\r\n      this.appendValueInput('expression')\r\n        .appendField('postfix')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('++'), 'operator');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      //this.setOutput(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_unary_postfix_return'] = {\r\n    init: function () {\r\n      this.appendValueInput('expression')\r\n        .appendField('postfix')\r\n        .setCheck(null)\r\n        .appendField(new Blockly.FieldTextInput('++'), 'operator');\r\n      //    this.setPreviousStatement(true, null);\r\n      //    this.setNextStatement(true, null);\r\n      this.setOutput(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_spread'] = {\r\n    init: function () {\r\n      this.appendValueInput('arg_array')\r\n        .setCheck(null)\r\n        .appendField('...');\r\n      this.setOutput(true, null);\r\n      this.setColour(290);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n\r\n  Blockly.Blocks['bi_parenthesis'] = {\r\n    init: function () {\r\n      this.appendValueInput('expression')\r\n        .setCheck(null)\r\n        .appendField('(_)');\r\n      this.setOutput(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('');\r\n      this.setHelpUrl('http://www.example.com/');\r\n    }\r\n  };\r\n  return Blockly.Blocks;\r\n}","// BlocksIDE is a project to create a complete js Blocks Development Platform\r\n//\r\n// Copyright 2016 Juan Carlos Orozco\r\n//\r\n// BlocksIDE was written by Juan Carlos Orozco and released under an Apache version 2 license.\r\n//\r\n// Git repositories for BlocksIDE are available at\r\n//\r\n// https://github.com/JC-Orozco/BlocksIDE\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nmodule.exports = function(Blockly){\r\n\r\nBlockly.JavaScript['bi_comment'] = function(block) {\r\n  // TODO: Assemble JavaScript into code variable.\r\n  var code = ''; // '...;\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_assignment'] = function(block) {\r\n  var value_left = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var value_right = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('OP');\r\n  var code = value_left+' '+text_operator+' '+value_right +\"\\n\";\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_assignment_return'] = function(block) {\r\n  var value_left = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var value_right = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('OP');\r\n  var code = value_left+' '+text_operator+' '+value_right;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.JavaScript['bi_math_arithmetic'] = function(block) {\r\n  // Basic arithmetic operators, and power.\r\n  var OPERATORS = {\r\n    'ADD': [' + ', Blockly.JavaScript.ORDER_ADDITION],\r\n    'MINUS': [' - ', Blockly.JavaScript.ORDER_SUBTRACTION],\r\n    'MULTIPLY': [' * ', Blockly.JavaScript.ORDER_MULTIPLICATION],\r\n    'DIVIDE': [' / ', Blockly.JavaScript.ORDER_DIVISION],\r\n    'POWER': [null, Blockly.JavaScript.ORDER_COMMA]  // Handle power separately.\r\n  };\r\n  var tuple = OPERATORS[block.getFieldValue('OP')];\r\n  var operator = ' ';\r\n  var order = Blockly.JavaScript.ORDER_ATOMIC;\r\n  if(tuple){\r\n    operator = tuple[0];\r\n    order = tuple[1];\r\n  }\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\r\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\r\n  var code;\r\n  // Power in JavaScript requires a special case since it has no operator.\r\n  if (!operator) {\r\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  }\r\n  code = argument0 + operator + argument1;\r\n  return [code, order];\r\n};\r\n\r\nBlockly.JavaScript['bi_logic_compare'] = function(block) {\r\n  // Comparison operator.\r\n  var OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>='\r\n  };\r\n  var operator = OPERATORS[block.getFieldValue('OP')];\r\n  var order = (operator === '==' || operator === '!=') ?\r\n      Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL;\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\r\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\r\n  var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n\r\nBlockly.JavaScript['bi_logic_operation'] = function(block) {\r\n  // Operations 'and', 'or'.\r\n  var operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\r\n  var order = (operator === '&&') ? Blockly.JavaScript.ORDER_LOGICAL_AND :\r\n      Blockly.JavaScript.ORDER_LOGICAL_OR;\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order);\r\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    var defaultArgument = (operator === '&&') ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n  \r\nBlockly.JavaScript['bi_try_catch'] = function(block) {\r\n  var statement_try = Blockly.JavaScript.statementToCode(block, 'try');\r\n  var statement_catch = Blockly.JavaScript.statementToCode(block, 'catch');\r\n  var statement_finally = Blockly.JavaScript.statementToCode(block, 'finally');\r\n  var text_parameter = block.getFieldValue('parameter');\r\n  var code = 'try{\\n'+statement_try+'\\n} catch('+text_parameter+'){\\n'+statement_catch+'\\n} finally{\\n'+statement_finally+\"}\\n\";\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_catch'] = function(block) {\r\n  var statement_catch = Blockly.JavaScript.statementToCode(block, 'catch');\r\n  var text_parameter = block.getFieldValue('parameter');\r\n  var code = 'catch('+text_parameter+'){\\n'+statement_catch+'}\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_throw'] = function(block) {\r\n  var value_throw = Blockly.JavaScript.valueToCode(block, 'throw', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = 'throw '+value_throw+'\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_yield'] = function(block) {\r\n  var value_yield = Blockly.JavaScript.valueToCode(block, 'yield', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var checkbox_delegate = block.getFieldValue('delegate') === 'TRUE';\r\n  var code = '';\r\n  if(checkbox_delegate){\r\n    code = 'yield* '\r\n  } else{\r\n    code = 'yield '    \r\n  }\r\n  code += value_yield+'\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_yield_return'] = function(block) {\r\n  var value_yield = Blockly.JavaScript.valueToCode(block, 'yield', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var checkbox_delegate = block.getFieldValue('delegate') === 'TRUE';\r\n  var code = '';\r\n  if(checkbox_delegate){\r\n    code = 'yield* '\r\n  } else{\r\n    code = 'yield '    \r\n  }\r\n  code += value_yield;\r\n  //return code;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.JavaScript['bi_export'] = function(block) {\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'export');\r\n  return 'export '+statement_chain\r\n}\r\n\r\nBlockly.JavaScript['bi_import'] = function(block) {\r\n//  var value_import = Blockly.JavaScript.valueToCode(block, 'import', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';    \r\n  }\r\n  var value_from = Blockly.JavaScript.valueToCode(block, 'from', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = 'import '\r\n  if(block.itemCount_ === 2){\r\n    code += codeArr[0]\r\n  } else{\r\n    code += '{'+codeArr.join(',')+'}'\r\n  }\r\n  code += ' from '+value_from+'\\n'\r\n  return code\r\n}\r\n\r\nBlockly.JavaScript['bi_import_as'] = function(block) {\r\n  var text_import = block.getFieldValue('input');\r\n  var text_as = block.getFieldValue('as');\r\n  var code = text_import+' as '+text_as\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n}\r\n\r\nBlockly.JavaScript['bi_code_part'] = function(block) {\r\n  var text_code = block.getFieldValue('code');\r\n  var code = text_code;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.JavaScript['bi_code_line'] = function(block) {\r\n  var text_code = block.getFieldValue('code');\r\n  var code = text_code+\"\\n\";\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_access_field'] = function(block) {\r\n  var value_variable = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('variable'), Blockly.Variables.NAME_TYPE);\r\n  var text_field = block.getFieldValue('field');\r\n  var value_input = Blockly.JavaScript.valueToCode(block, 'input', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = value_variable+\".\"+text_field+\" = \"+value_input+\"\\n\";\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_set_to'] = function(block) {\r\n  var text_code = block.getFieldValue('code');\r\n  var value_input = Blockly.JavaScript.valueToCode(block, 'input', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = text_code+\" = \"+value_input+\"\\n\";\r\n  return code;\r\n};\r\n\r\n// Fix, init statements must be separated by a comma\r\nBlockly.JavaScript['bi_for'] = function(block) {\r\n  Blockly.Generator.prototype.STATEMENT_PREFIX = ', '\r\n  var statement_init = Blockly.JavaScript.statementToCode(block, 'init');\r\n  Blockly.Generator.prototype.STATEMENT_PREFIX = null;\r\n  var value_test = Blockly.JavaScript.valueToCode(block, 'test', Blockly.JavaScript.ORDER_ATOMIC);\r\n  Blockly.Generator.prototype.STATEMENT_PREFIX = ', '\r\n  var statement_update = Blockly.JavaScript.statementToCode(block, 'update');\r\n  Blockly.Generator.prototype.STATEMENT_PREFIX = null;\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  // g on this REGEX means match all ocurences \r\n  statement_init = statement_init.replace(', ', '').replace(/\\n {2}/g, '').trim();\r\n  statement_update = statement_update.replace(', ', '').replace(/\\n {2}/g, '').trim();\r\n  var code = 'for( '+statement_init+'; '+value_test+'; '+statement_update+' ){\\n'+statement_chain+'}\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_for_in'] = function(block) {\r\n  var text_var = block.getFieldValue('var');\r\n  var value_array = Blockly.JavaScript.valueToCode(block, 'array', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var code = 'for(let '+text_var+' in '+value_array+'){\\n'+statement_chain+'}\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_switch'] = function(block) {\r\n  var value_switch = Blockly.JavaScript.valueToCode(block, 'switch', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var statement_default = Blockly.JavaScript.statementToCode(block, 'default');\r\n  var codeArr = new Array(block.itemCount_-1);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';    \r\n  }\r\n  var code = 'switch(' + value_switch + '){\\n' + codeArr.join('\\n') + '\\ndefault: ' + statement_default +'}\\n';\r\n  return code;\r\n}\r\n\r\nBlockly.JavaScript['bi_case'] = function(block) {\r\n  var value_case = Blockly.JavaScript.valueToCode(block, 'case', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var statement_st = Blockly.JavaScript.statementToCode(block, 'statement');  \r\n  var code = 'case '+value_case+':' + statement_st //+ '\\n';\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];  \r\n}\r\n\r\nBlockly.JavaScript['bi_continue'] = function(block) {\r\n  return '\\ncontinue\\n'\r\n}\r\n\r\nBlockly.JavaScript['bi_break'] = function(block) {\r\n  return '\\nbreak\\n'  \r\n}\r\n\r\nBlockly.JavaScript['bi_s1'] = function(block) {\r\n  // Create a list with any number of elements of any type.\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_); // block.itemCount_);\r\n  for (var n = 0; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n] = //Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n    //    Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    Blockly.JavaScript.statementToCode(block, 'items' + n) || '';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \"\\n  .\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = 'for(' + codeArr.join(', ') + '){' + chain+'}\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_call_statement'] = function(block) {\r\n  // Create a list with any number of elements of any type.\r\n  var text_name = block.getFieldValue('NAME');\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \".\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = text_name + '(' + codeArr.join(', ') + ')' + chain+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_call'] = function(block) {\r\n  // Create a list with any number of elements of any type.\r\n  var text_name = block.getFieldValue('NAME');\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \".\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = text_name + '(' + codeArr.join(', ') + ')' + chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_direct_call_editable'] = function(block) {\r\n  var value_function = Blockly.JavaScript.valueToCode(block, 'function', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1); // block.itemCount_);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \"\\n  .\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = '(' + value_function + ')(' + codeArr.join(', ') + ')' + chain+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_direct_call_editable_return'] = function(block) {\r\n  var value_function = Blockly.JavaScript.valueToCode(block, 'function', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1); // block.itemCount_);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \"\\n  .\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = '(' + value_function + ')(' + codeArr.join(', ') + ')' + chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n  \r\nBlockly.JavaScript['bi_call_editable'] = function(block) {\r\n  var text_name = block.getFieldValue('NAME');\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1); // block.itemCount_);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \"\\n  .\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = text_name + '(' + codeArr.join(', ') + ')' + chain+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_call_editable_return'] = function(block) {\r\n  var text_name = block.getFieldValue('NAME');\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var codeArr = new Array(block.itemCount_-1); // block.itemCount_);\r\n  for (var n = 1; n < block.itemCount_; n++) {\r\n    // code[n] = Blockly.JavaScript.valueToCode(block, 'ADD' + n,\r\n    //     Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    // TODO: Fix the naming on the AddSubGroup block and use code above\r\n    codeArr[n-1] = Blockly.JavaScript.valueToCode(block, 'items' + n,\r\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n  }\r\n  var chain = \"\";\r\n  if(value_chain !== \"\"){\r\n    chain = \"\\n  .\"+value_chain.trim();\r\n  }\r\n  //var code = text_name.substr(1, text_name.length-2) + '(' + codeArr.join(', ') + ')' + chain;\r\n  var code = text_name + '(' + codeArr.join(', ') + ')' + chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_function_return'] = function(block) {\r\n  //var text_name = block.getFieldValue('name');\r\n  var function_type = block.getFieldValue('function_type');\r\n  var text_name = block.getFieldValue('name');\r\n  var text_args = block.getFieldValue('args');\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain;\r\n  var code = function_type+text_name+'(';\r\n  code += text_args + '){\\n' + chain +'}\\n';\r\n\r\n  //return [code, Blockly.JavaScript.ORDER_NONE];\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_function'] = function(block) {\r\n  var text_name = block.getFieldValue('name');\r\n  var function_type = block.getFieldValue('function_type');\r\n  var text_args = block.getFieldValue('args');\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain;\r\n  var code = function_type+text_name+'(';    \r\n  code += text_args + '){\\n' + chain +'}\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_return'] = function(block) {\r\n  var value_ret = Blockly.JavaScript.valueToCode(block, 'ret', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = 'return '+value_ret+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_maps_set'] = function(block) {\r\n  var text_name = block.getFieldValue('name');\r\n  var text_val = block.getFieldValue('val');\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain;\r\n  var code = 'set '+text_name+'(';\r\n  code += text_val + '){\\n' + chain +'}\\n';\r\n\r\n  //return [code, Blockly.JavaScript.ORDER_NONE];\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_maps_get'] = function(block) {\r\n  var text_name = block.getFieldValue('name');\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain;\r\n  var code = 'get ' + text_name+'(';\r\n  code += '){\\n' + chain +'}\\n';\r\n\r\n  //return [code, Blockly.JavaScript.ORDER_NONE];\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n  \r\nBlockly.JavaScript['bi_var'] = function(block) {\r\n  var var_type = block.getFieldValue('var_type');\r\n  var text_var = block.getFieldValue('var');\r\n  var value_val = Blockly.JavaScript.valueToCode(block, 'val', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = var_type+' '+text_var;\r\n  if(value_val === ''){\r\n    code += '\\n';\r\n  } else{\r\n    code +=' = '+value_val +'\\n';\r\n  }\r\n  //return [code, Blockly.JavaScript.ORDER_NONE];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_var_name'] = function(block) {\r\n  var text_name = block.getFieldValue('NAME');\r\n  var code = text_name;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_new'] = function(block) {\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var chain = value_chain.trim();\r\n  var code = \"new \"+chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_anonymous_class'] = function(block) {\r\n  var text_name = block.getFieldValue('NAME');\r\n  var text_extends = block.getFieldValue('extends');\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var code = 'class '+text_name\r\n  if(text_extends !== '')\r\n    code += ' extends '+text_extends\r\n  code += '{\\n'+statement_chain+'}';\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_class'] = function(block) {\r\n  var text_name = block.getFieldValue('NAME');\r\n  var text_extends = block.getFieldValue('extends');\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var code = 'class '+text_name\r\n  if(text_extends !== '')\r\n    code += ' extends '+text_extends\r\n  code += '{\\n'+statement_chain+'}\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_static'] = function(block) {\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'static');\r\n  return 'static '+statement_chain\r\n}\r\n\r\nBlockly.JavaScript['bi_get'] = function(block) {\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'get');\r\n  return 'get '+statement_chain\r\n}\r\n\r\nBlockly.JavaScript['bi_set'] = function(block) {\r\n  var statement_chain = Blockly.JavaScript.statementToCode(block, 'set');\r\n  return 'set '+statement_chain\r\n}\r\n\r\nBlockly.JavaScript['bi_field'] = function(block) {\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_name = block.getFieldValue('NAME');\r\n  var chain = '';\r\n  if(value_chain !== ''){\r\n    if(value_chain[0] === '['){\r\n      chain = value_chain.trim();\r\n    } else{\r\n      chain = '.'+value_chain.trim();\r\n    }\r\n  }\r\n  var code = text_name+chain+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_field_return'] = function(block) {\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_name = block.getFieldValue('NAME');\r\n  var chain = '';\r\n  if(value_chain !== ''){\r\n    if(value_chain[0] === '['){\r\n      chain = value_chain.trim();\r\n    } else{\r\n      chain = '.'+value_chain.trim();\r\n    }\r\n  }\r\n  var code = text_name+chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_string_return'] = function(block) {\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_name = block.getFieldValue('NAME');\r\n  var chain = '';\r\n  if(value_chain !== ''){\r\n    if(value_chain[0] === '['){\r\n      chain = value_chain.trim();\r\n    } else{\r\n      chain = '.'+value_chain.trim();\r\n    }\r\n  }\r\n  var code = '\"'+text_name+'\"'+chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_index'] = function(block) {\r\n  var value_chain = Blockly.JavaScript.valueToCode(block, 'chain', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var value_index = Blockly.JavaScript.valueToCode(block, 'index', Blockly.JavaScript.ORDER_ATOMIC);  \r\n  var chain = '';\r\n  if(value_chain !== ''){\r\n    chain = '.'+value_chain.trim();\r\n  }\r\n  var code = '['+value_index+']'+chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_adaptor'] = function(block) {\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain.trim();\r\n  var code = chain;\r\n  //var code = statements_chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_statement'] = function(block) {\r\n  var statements_chain = Blockly.JavaScript.statementToCode(block, 'chain');\r\n  var chain = statements_chain.trim();\r\n  var code = chain;\r\n  //var code = statements_chain;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_unary'] = function(block) {\r\n  function isLetter(c) {\r\n    return c.toLowerCase() !== c.toUpperCase();\r\n  }\r\n  var value_expression = Blockly.JavaScript.valueToCode(block, 'expression', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('operator');\r\n  if(isLetter(text_operator[0])){\r\n    text_operator += ' '; \r\n  }\r\n  var code = text_operator+value_expression +'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_unary_return'] = function(block) {\r\n  function isLetter(c) {\r\n    return c.toLowerCase() !== c.toUpperCase();\r\n  }\r\n  var value_expression = Blockly.JavaScript.valueToCode(block, 'expression', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('operator');\r\n  if(isLetter(text_operator[0])){\r\n    text_operator += ' '; \r\n  }\r\n  var code = text_operator+value_expression;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n  \r\nBlockly.JavaScript['bi_unary_postfix'] = function(block) {\r\n  function isLetter(c) {\r\n    return c.toLowerCase() !== c.toUpperCase();\r\n  }\r\n  var value_expression = Blockly.JavaScript.valueToCode(block, 'expression', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('operator');\r\n  if(isLetter(text_operator[0])){\r\n    text_operator += ' '; \r\n  }\r\n  var code = value_expression+text_operator+'\\n';\r\n  //return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_unary_postfix_return'] = function(block) {\r\n  function isLetter(c) {\r\n    return c.toLowerCase() !== c.toUpperCase();\r\n  }\r\n  var value_expression = Blockly.JavaScript.valueToCode(block, 'expression', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var text_operator = block.getFieldValue('operator');\r\n  if(isLetter(text_operator[0])){\r\n    text_operator += ' '; \r\n  }\r\n  var code = value_expression+text_operator;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return code;\r\n};\r\n\r\nBlockly.JavaScript['bi_spread'] = function(block) {\r\n  var value_name = Blockly.JavaScript.valueToCode(block, 'arg_array', Blockly.JavaScript.ORDER_ATOMIC);\r\n  var code = '...'+value_name;\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  //return [code, Blockly.JavaScript.ORDER_NONE];\r\n  //return code;\r\n};\r\nreturn Blockly.JavaScript;}\r\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export const\r\n    cmdId = 'blockly-script',\r\n    keyBlocklyXml = 'blockly-xml';","export default class BlocklyEditor {\r\n    constructor(div, opts = {}) {\r\n        const toolbox = opts.toolbox || `<xml xmlns=\"https://developers.google.com/blockly/xml\" id=\"toolbox\" style=\"display: none\">\r\n        <category name=\"Logic\" colour=\"%{BKY_LOGIC_HUE}\">\r\n            <category name=\"If\">\r\n                <block type=\"controls_if\"></block>\r\n                <block type=\"controls_if\">\r\n                    <mutation else=\"1\"></mutation>\r\n                </block>\r\n                <block type=\"controls_if\">\r\n                    <mutation elseif=\"1\" else=\"1\"></mutation>\r\n                </block>\r\n            </category>\r\n            <category name=\"Boolean\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                <block type=\"logic_compare\"></block>\r\n                <block type=\"logic_operation\"></block>\r\n                <block type=\"logic_negate\"></block>\r\n                <block type=\"logic_boolean\"></block>\r\n                <block type=\"logic_null\"></block>\r\n                <block type=\"logic_ternary\"></block>\r\n            </category>\r\n        </category>\r\n        <category name=\"Loops\" colour=\"%{BKY_LOOPS_HUE}\">\r\n            <block type=\"controls_repeat_ext\">\r\n                <value name=\"TIMES\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">10</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"controls_whileUntil\"></block>\r\n            <block type=\"bi_for\"></block>\r\n            <block type=\"controls_for\">\r\n                <field name=\"VAR\">i</field>\r\n                <value name=\"FROM\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">1</field>\r\n                </block>\r\n                </value>\r\n                <value name=\"TO\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">10</field>\r\n                </block>\r\n                </value>\r\n                <value name=\"BY\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">1</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"controls_forEach\"></block>\r\n            <block type=\"controls_flow_statements\"></block>\r\n        </category>\r\n        <category name=\"Math\" colour=\"%{BKY_MATH_HUE}\">\r\n            <block type=\"math_number\">\r\n                <field name=\"NUM\">123</field>\r\n            </block>\r\n            <block type=\"bi_parenthesis\"></block>\r\n            <block type=\"bi_unary\"></block>\r\n            <block type=\"bi_unary_return\"></block>\r\n            <block type=\"bi_unary_postfix\"></block>\r\n            <block type=\"bi_unary_postfix_return\"></block>\r\n            <block type=\"math_arithmetic\"></block>\r\n            <block type=\"math_single\"></block>\r\n            <block type=\"math_trig\"></block>\r\n            <block type=\"math_constant\"></block>\r\n            <block type=\"math_number_property\"></block>\r\n            <block type=\"math_round\"></block>\r\n            <block type=\"math_on_list\"></block>\r\n            <block type=\"math_modulo\"></block>\r\n            <block type=\"math_constrain\">\r\n                <value name=\"LOW\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">1</field>\r\n                </block>\r\n                </value>\r\n                <value name=\"HIGH\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">100</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"math_random_int\">\r\n                <value name=\"FROM\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">1</field>\r\n                </block>\r\n                </value>\r\n                <value name=\"TO\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">100</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"math_random_float\"></block>\r\n            <block type=\"math_atan2\"></block>\r\n        </category>\r\n        <category name=\"Lists\" colour=\"%{BKY_LISTS_HUE}\">\r\n            <block type=\"lists_create_empty\"></block>\r\n            <block type=\"lists_create_with\"></block>\r\n            <block type=\"lists_repeat\">\r\n                <value name=\"NUM\">\r\n                <block type=\"math_number\">\r\n                    <field name=\"NUM\">5</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"lists_length\"></block>\r\n            <block type=\"lists_isEmpty\"></block>\r\n            <block type=\"lists_indexOf\"></block>\r\n            <block type=\"lists_getIndex\"></block>\r\n            <block type=\"lists_setIndex\"></block>\r\n        </category>\r\n        <sep></sep>\r\n        <category name=\"Text\" colour=\"%{BKY_TEXTS_HUE}\">\r\n            <block type=\"text\"></block>\r\n            <block type=\"text_join\"></block>\r\n            <block type=\"text_append\">\r\n                <value name=\"TEXT\">\r\n                <shadow type=\"text\"></shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_length\">\r\n                <value name=\"VALUE\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_isEmpty\">\r\n                <value name=\"VALUE\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\"></field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_indexOf\">\r\n                <value name=\"VALUE\">\r\n                <block type=\"variables_get\">\r\n                    <field name=\"VAR\">{textVariable}</field>\r\n                </block>\r\n                </value>\r\n                <value name=\"FIND\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_charAt\">\r\n                <value name=\"VALUE\">\r\n                <block type=\"variables_get\">\r\n                    <field name=\"VAR\">{textVariable}</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_getSubstring\">\r\n                <value name=\"STRING\">\r\n                <block type=\"variables_get\">\r\n                    <field name=\"VAR\">{textVariable}</field>\r\n                </block>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_changeCase\">\r\n                <value name=\"TEXT\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_trim\">\r\n                <value name=\"TEXT\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_print\">\r\n                <value name=\"TEXT\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"text_prompt_ext\">\r\n                <value name=\"TEXT\">\r\n                <shadow type=\"text\">\r\n                    <field name=\"TEXT\">abc</field>\r\n                </shadow>\r\n                </value>\r\n            </block>\r\n        </category>\r\n        <category name=\"Variables\" custom=\"VARIABLE\" colour=\"%{BKY_VARIABLES_HUE}\">\r\n        </category>\r\n        <category name=\"Functions\" custom=\"PROCEDURE\" colour=\"%{BKY_PROCEDURES_HUE}\">\r\n        </category>\r\n        <category id=\"catColour\" name=\"Color\" colour=\"20\">\r\n            <block type=\"colour_picker\"></block>\r\n            <block type=\"colour_random\"></block>\r\n            <block type=\"colour_rgb\">\r\n                <value name=\"RED\">\r\n                    <shadow type=\"math_number\">\r\n                        <field name=\"NUM\">100</field>\r\n                    </shadow>\r\n                </value>\r\n                <value name=\"GREEN\">\r\n                    <shadow type=\"math_number\">\r\n                        <field name=\"NUM\">50</field>\r\n                    </shadow>\r\n                </value>\r\n                <value name=\"BLUE\">\r\n                    <shadow type=\"math_number\">\r\n                        <field name=\"NUM\">0</field>\r\n                    </shadow>\r\n                </value>\r\n            </block>\r\n            <block type=\"colour_blend\">\r\n                <value name=\"COLOUR1\">\r\n                    <shadow type=\"colour_picker\">\r\n                        <field name=\"COLOUR\">#ff0000</field>\r\n                    </shadow>\r\n                </value>\r\n                <value name=\"COLOUR2\">\r\n                    <shadow type=\"colour_picker\">\r\n                        <field name=\"COLOUR\">#3333ff</field>\r\n                    </shadow>\r\n                </value>\r\n                <value name=\"RATIO\">\r\n                    <shadow type=\"math_number\">\r\n                        <field name=\"NUM\">0.5</field>\r\n                    </shadow>\r\n                </value>\r\n            </block>\r\n        </category>\r\n        <sep></sep>\r\n        <category name=\"Modern\" colour=\"230\">\r\n            <block type=\"bi_var\"></block>\r\n            <block type=\"bi_var_name\"></block>\r\n            <block type=\"bi_assignment\"></block>      \r\n            <block type=\"bi_assignment_return\"></block>      \r\n            <block type=\"bi_field\"></block>\r\n            <block type=\"bi_field_return\"></block>\r\n            <block type=\"bi_return\"></block>\r\n            <block type=\"bi_spread\"></block>\r\n        </category>\r\n        <category name=\"Advanced js\" colour=\"90\">\r\n            <block type=\"bi_new\"></block>\r\n            <block type=\"bi_anonymous_class\"></block>\r\n            <block type=\"bi_class\"></block>\r\n            <block type=\"bi_static\"></block>      \r\n            <block type=\"bi_get\"></block>\r\n            <block type=\"bi_set\"></block>\r\n            <block type=\"bi_try_catch\"></block>      \r\n            <block type=\"bi_catch\"></block>\r\n            <block type=\"bi_comment\"></block>\r\n        </category>\r\n        ${opts.toolboxPush}\r\n        <category name=\"Library\" expanded=\"true\">\r\n            <category name=\"Randomize\">\r\n                <block type=\"procedures_defnoreturn\">\r\n                <mutation>\r\n                    <arg name=\"list\"></arg>\r\n                </mutation>\r\n                <field name=\"NAME\">randomize</field>\r\n                <statement name=\"STACK\">\r\n                    <block type=\"controls_for\" inline=\"true\">\r\n                    <field name=\"VAR\">x</field>\r\n                    <value name=\"FROM\">\r\n                        <block type=\"math_number\">\r\n                        <field name=\"NUM\">1</field>\r\n                        </block>\r\n                    </value>\r\n                    <value name=\"TO\">\r\n                        <block type=\"lists_length\" inline=\"false\">\r\n                        <value name=\"VALUE\">\r\n                            <block type=\"variables_get\">\r\n                            <field name=\"VAR\">list</field>\r\n                            </block>\r\n                        </value>\r\n                        </block>\r\n                    </value>\r\n                    <value name=\"BY\">\r\n                        <block type=\"math_number\">\r\n                        <field name=\"NUM\">1</field>\r\n                        </block>\r\n                    </value>\r\n                    <statement name=\"DO\">\r\n                        <block type=\"variables_set\" inline=\"false\">\r\n                        <field name=\"VAR\">y</field>\r\n                        <value name=\"VALUE\">\r\n                            <block type=\"math_random_int\" inline=\"true\">\r\n                            <value name=\"FROM\">\r\n                                <block type=\"math_number\">\r\n                                <field name=\"NUM\">1</field>\r\n                                </block>\r\n                            </value>\r\n                            <value name=\"TO\">\r\n                                <block type=\"lists_length\" inline=\"false\">\r\n                                <value name=\"VALUE\">\r\n                                    <block type=\"variables_get\">\r\n                                    <field name=\"VAR\">list</field>\r\n                                    </block>\r\n                                </value>\r\n                                </block>\r\n                            </value>\r\n                            </block>\r\n                        </value>\r\n                        <next>\r\n                            <block type=\"variables_set\" inline=\"false\">\r\n                            <field name=\"VAR\">temp</field>\r\n                            <value name=\"VALUE\">\r\n                                <block type=\"lists_getIndex\" inline=\"true\">\r\n                                <mutation statement=\"false\" at=\"true\"></mutation>\r\n                                <field name=\"MODE\">GET</field>\r\n                                <field name=\"WHERE\">FROM_START</field>\r\n                                <value name=\"AT\">\r\n                                    <block type=\"variables_get\">\r\n                                    <field name=\"VAR\">y</field>\r\n                                    </block>\r\n                                </value>\r\n                                <value name=\"VALUE\">\r\n                                    <block type=\"variables_get\">\r\n                                    <field name=\"VAR\">list</field>\r\n                                    </block>\r\n                                </value>\r\n                                </block>\r\n                            </value>\r\n                            <next>\r\n                                <block type=\"lists_setIndex\" inline=\"false\">\r\n                                <value name=\"AT\">\r\n                                    <block type=\"variables_get\">\r\n                                    <field name=\"VAR\">y</field>\r\n                                    </block>\r\n                                </value>\r\n                                <value name=\"LIST\">\r\n                                    <block type=\"variables_get\">\r\n                                    <field name=\"VAR\">list</field>\r\n                                    </block>\r\n                                </value>\r\n                                <value name=\"TO\">\r\n                                    <block type=\"lists_getIndex\" inline=\"true\">\r\n                                    <mutation statement=\"false\" at=\"true\"></mutation>\r\n                                    <field name=\"MODE\">GET</field>\r\n                                    <field name=\"WHERE\">FROM_START</field>\r\n                                    <value name=\"AT\">\r\n                                        <block type=\"variables_get\">\r\n                                        <field name=\"VAR\">x</field>\r\n                                        </block>\r\n                                    </value>\r\n                                    <value name=\"VALUE\">\r\n                                        <block type=\"variables_get\">\r\n                                        <field name=\"VAR\">list</field>\r\n                                        </block>\r\n                                    </value>\r\n                                    </block>\r\n                                </value>\r\n                                <next>\r\n                                    <block type=\"lists_setIndex\" inline=\"false\">\r\n                                    <value name=\"AT\">\r\n                                        <block type=\"variables_get\">\r\n                                        <field name=\"VAR\">x</field>\r\n                                        </block>\r\n                                    </value>\r\n                                    <value name=\"LIST\">\r\n                                        <block type=\"variables_get\">\r\n                                        <field name=\"VAR\">list</field>\r\n                                        </block>\r\n                                    </value>\r\n                                    <value name=\"TO\">\r\n                                        <block type=\"variables_get\">\r\n                                        <field name=\"VAR\">temp</field>\r\n                                        </block>\r\n                                    </value>\r\n                                    </block>\r\n                                </next>\r\n                                </block>\r\n                            </next>\r\n                            </block>\r\n                        </next>\r\n                        </block>\r\n                    </statement>\r\n                    </block>\r\n                </statement>\r\n                </block>\r\n            </category>\r\n            <category name=\"Jabberwocky\">\r\n                <block type=\"text_print\">\r\n                <value name=\"TEXT\">\r\n                    <block type=\"text\">\r\n                    <field name=\"TEXT\">'Twas brillig, and the slithy toves</field>\r\n                    </block>\r\n                </value>\r\n                <next>\r\n                    <block type=\"text_print\">\r\n                    <value name=\"TEXT\">\r\n                        <block type=\"text\">\r\n                        <field name=\"TEXT\">  Did gyre and gimble in the wabe:</field>\r\n                        </block>\r\n                    </value>\r\n                    <next>\r\n                        <block type=\"text_print\">\r\n                        <value name=\"TEXT\">\r\n                            <block type=\"text\">\r\n                            <field name=\"TEXT\">All mimsy were the borogroves,</field>\r\n                            </block>\r\n                        </value>\r\n                        <next>\r\n                            <block type=\"text_print\">\r\n                            <value name=\"TEXT\">\r\n                                <block type=\"text\">\r\n                                <field name=\"TEXT\">  And the mome raths outgrabe.</field>\r\n                                </block>\r\n                            </value>\r\n                            </block>\r\n                        </next>\r\n                        </block>\r\n                    </next>\r\n                    </block>\r\n                </next>\r\n                </block>\r\n                <block type=\"text_print\">\r\n                <value name=\"TEXT\">\r\n                    <block type=\"text\">\r\n                    <field name=\"TEXT\">\"Beware the Jabberwock, my son!</field>\r\n                    </block>\r\n                </value>\r\n                <next>\r\n                    <block type=\"text_print\">\r\n                    <value name=\"TEXT\">\r\n                        <block type=\"text\">\r\n                        <field name=\"TEXT\">  The jaws that bite, the claws that catch!</field>\r\n                        </block>\r\n                    </value>\r\n                    <next>\r\n                        <block type=\"text_print\">\r\n                        <value name=\"TEXT\">\r\n                            <block type=\"text\">\r\n                            <field name=\"TEXT\">Beware the Jubjub bird, and shun</field>\r\n                            </block>\r\n                        </value>\r\n                        <next>\r\n                            <block type=\"text_print\">\r\n                            <value name=\"TEXT\">\r\n                                <block type=\"text\">\r\n                                <field name=\"TEXT\">  The frumious Bandersnatch!\"</field>\r\n                                </block>\r\n                            </value>\r\n                            </block>\r\n                        </next>\r\n                        </block>\r\n                    </next>\r\n                    </block>\r\n                </next>\r\n                </block>\r\n            </category>\r\n        </category>\r\n        </xml>`;\r\n        this.workspace = Blockly.inject(div, {\r\n            toolbox: toolbox,\r\n            zoom: {\r\n                controls: true,\r\n                wheel: true,\r\n                startScale: 1.0,\r\n                maxScale: 3,\r\n                minScale: 0.2,\r\n                scaleSpeed: 1.2\r\n            },\r\n            grid: {\r\n                spacing: 20,\r\n                length: 3,\r\n                color: '#ccc',\r\n                snap: true\r\n            },\r\n            trashcan: true,\r\n            ...opts.workspaceOptions\r\n        });\r\n    }\r\n\r\n    hide() {}\r\n}","import {\r\n    cmdId,\r\n    keyBlocklyXml\r\n} from './consts';\r\n//import {\r\n//    parseCode\r\n//} from './utils/js2blocks';\r\nimport BlocklyEditor from './blocklyEditor';\r\n\r\nexport default (editor, opts = {}) => {\r\n    const cm = editor.Commands;\r\n    const md = editor.Modal;\r\n    const domc = editor.Components;\r\n    const {\r\n        modalTitle,\r\n        codeViewOptions,\r\n        commandBlocklyScript,\r\n        blocklyOptions,\r\n        blocklyTypesSupport,\r\n        toolbarIcon,\r\n        onRun,\r\n        onError,\r\n        starter\r\n    } = opts;\r\n\r\n    let blocklyEditor = null;\r\n    let content = null;\r\n\r\n    const appendToContent = (target, content) => {\r\n        if (content instanceof HTMLElement) {\r\n            target.appendChild(content);\r\n        } else if (content) {\r\n            target.insertAdjacentHTML('beforeend', content);\r\n        }\r\n    };\r\n\r\n    // Add icons to specified component types\r\n    blocklyTypesSupport && blocklyTypesSupport.forEach(type => {\r\n        const typeOpt = domc.getType(type).model;\r\n        domc.addType(type, {\r\n            model: {\r\n                initToolbar() {\r\n                    typeOpt.prototype.initToolbar.apply(this, arguments);\r\n                    const tb = this.get('toolbar');\r\n                    const tbExists = tb.some(item => item.command === cmdId);\r\n\r\n                    if (!tbExists) {\r\n                        tb.unshift({\r\n                            command: cmdId,\r\n                            label: toolbarIcon,\r\n                            ...opts.toolbarBtnBlockly\r\n                        });\r\n                        this.set('toolbar', tb);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    })\r\n\r\n    // Add the blockly command\r\n    cm.add(cmdId, {\r\n        keyBlocklyXml,\r\n\r\n        run(editor, sender, opts = {}) {\r\n            this.editor = editor;\r\n            this.options = opts;\r\n            this.target = opts.target || editor.getSelected();\r\n            const target = this.target;\r\n\r\n            if (target) this.showCustomCode(target);\r\n        },\r\n\r\n        stop(editor) {\r\n            //blocklyEditor && blocklyEditor.hide();\r\n            blocklyEditor.workspace.clear();\r\n            md.close();\r\n        },\r\n\r\n        /**\r\n         * Method which tells how to show the custom code\r\n         * @param  {Component} target\r\n         */\r\n        showCustomCode(target) {\r\n            const {\r\n                editor,\r\n                options\r\n            } = this;\r\n            const title = options.title || modalTitle;\r\n            if (!content) content = this.getContent();\r\n            const code = target.getScriptString();\r\n            md.open({\r\n                title,\r\n                content\r\n            }).getModel().once('change:open', () => editor.stopCommand(this.id));\r\n            //? mount code editors\r\n            if (!blocklyEditor) {\r\n                blocklyEditor = new BlocklyEditor(content.querySelector('#blockly'), blocklyOptions);\r\n                blocklyEditor.workspace.addChangeListener(() => this.updateWorkspace());\r\n            }\r\n            const xml = target.get(keyBlocklyXml) || starter; //(code && parseCode(code)) || starter;\r\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), blocklyEditor.workspace);\r\n        },\r\n\r\n        /**\r\n         * Custom pre-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPreContent() {},\r\n\r\n        /**\r\n         * Custom post-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPostContent() {\r\n            const postContent = document.createElement('div');\r\n            postContent.id = \"code-viewer\";\r\n            const codeViewer = this.getCodeViewer();\r\n            codeViewer.refresh();\r\n            setTimeout(() => codeViewer.focus(), 0);\r\n            postContent.appendChild(codeViewer.getElement());\r\n\r\n            return postContent; //blockly el\r\n        },\r\n\r\n        /**\r\n         * Get all the content for the custom code\r\n         * @return {HTMLElement}\r\n         */\r\n        getContent() {\r\n            const {\r\n                editor\r\n            } = this;\r\n            const content = document.createElement('div');\r\n            const blocklyCont = document.createElement('div');\r\n            blocklyCont.id = \"blockly-cont\";\r\n            blocklyCont.innerHTML = `<div id=\"blockly\" style=\"width:100%;height:400px;color:grey\"></div>`;\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            content.className = `${pfx}inject-logic`;\r\n            appendToContent(content, this.getPreContent());\r\n            content.appendChild(blocklyCont);\r\n            appendToContent(content, this.getPostContent());\r\n            appendToContent(content, this.getContentActions());\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Get the actions content. Can be a simple string or an HTMLElement\r\n         * @return {HTMLElement|String}\r\n         */\r\n        getContentActions() {\r\n            const {\r\n                editor\r\n            } = this;\r\n            const actions = document.createElement('div');\r\n            actions.id = \"actns\";\r\n            actions.style = \"position:absolute;bottom:260px;right:20px;z-index:2\";\r\n            const btn = document.createElement('button');\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            btn.innerHTML = opts.buttonLabel;\r\n            btn.className = `${pfx}btn-prim ${pfx}btn-save__inject-logic`;\r\n            btn.onclick = () => this.handleSave();\r\n\r\n            const runLogic = document.createElement('div');\r\n            runLogic.id = \"logic-toolbar\";\r\n            runLogic.className = \"fa fa-bug\";\r\n            runLogic.style = \"margin:5px;padding:10px;background:rgba(0,0,0,0.2);border-radius:3px;border:1px solid rgba(0,0,0,0.2);cursor:pointer\";\r\n            runLogic.onclick = () => this.runCode();\r\n\r\n            actions.appendChild(runLogic);\r\n            actions.appendChild(btn);\r\n\r\n            return actions;\r\n        },\r\n\r\n        /**\r\n         * Handle the main save task\r\n         */\r\n        handleSave() {\r\n            const {\r\n                editor,\r\n                target\r\n            } = this;\r\n            const code = this.getCodeViewer().getContent();\r\n            const xml = Blockly.Xml.workspaceToDom(blocklyEditor.workspace);\r\n            target.set('script', code);\r\n            target.set(keyBlocklyXml, Blockly.Xml.domToText(xml));\r\n            editor.Modal.close();\r\n        },\r\n\r\n        /**\r\n         * Return the code viewer instance\r\n         * @return {CodeViewer}\r\n         */\r\n        getCodeViewer() {\r\n            const {\r\n                editor\r\n            } = this;\r\n\r\n            if (!this.codeViewer) {\r\n                this.codeViewer = editor.CodeManager.createViewer({\r\n                    codeName: 'javascript',\r\n                    theme: 'hopscotch',\r\n                    readOnly: 1,\r\n                    autoBeautify: 1,\r\n                    ...codeViewOptions,\r\n                });\r\n            }\r\n\r\n            return this.codeViewer;\r\n        },\r\n\r\n        /**\r\n         * Toggle between blockly and code viewer\r\n         */\r\n        toggleCodeViewer() {\r\n            const blocklyStyle = content.querySelector('#blockly').style;\r\n            const codeViewerStyle = content.querySelector('#code-viewer').style;\r\n            const hidden = (blocklyStyle.height == '0px') || (blocklyStyle.height == '0');\r\n            if (hidden) {\r\n                blocklyStyle.height = \"500px\";\r\n                codeViewerStyle.display = \"none\";\r\n            } else {\r\n                blocklyStyle.height = \"0\";\r\n                codeViewerStyle.display = \"block\";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update code when blocks change\r\n         */\r\n        updateWorkspace(e) {\r\n            const blockly_code = Blockly.JavaScript.workspaceToCode(Blockly.mainWorkspace);\r\n            try {\r\n                // set readonly from generated\r\n                this.getCodeViewer().setContent(blockly_code);\r\n            } catch (e) {\r\n                // readonly not found.\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Syncronize blockly when code changes\r\n         */\r\n        sync() {\r\n            const code = this.getCodeViewer().getContent();\r\n            //parseCode(code);\r\n        },\r\n\r\n        /**\r\n         * Evaluate code syntax\r\n         */\r\n        runCode() {\r\n            //console.log(\"run\")\r\n            try {\r\n                const code = this.getCodeViewer().getContent();\r\n                Function('\"use strict\";' + code)(); // final code\r\n                onRun && onRun();\r\n            } catch (err) {\r\n                console.log(\"error\", err);\r\n                onError && onError(err);\r\n            }\r\n        },\r\n\r\n        ...commandBlocklyScript,\r\n    });\r\n}","import biBlocks from './utils/bi_blockly/blocks/bi_blockly';\nimport biBlocksJS from './utils/bi_blockly/generators/javascript/bi_blockly';\nimport commands from './commands';\n\nexport default (editor, opts = {}) => {\n  const options = {\n    ...{\n      // Blockly options\n      blocklyOptions: {\n        toolbox: '',\n        toolboxPush: '',\n        workspaceOptions: {}\n      },\n\n      // Starter xml\n      starter: '<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"bi_var\" id=\"OHq;p^O:()AR3;aG%CwD\" x=\"90\" y=\"30\"><field name=\"var_type\">let</field><field name=\"var\">el</field><value name=\"val\"><block type=\"bi_var_name\" id=\"Je,,~AE%W2MCRA?7u.^0\"><field name=\"NAME\">this</field></block></value></block></xml>',\n\n      toolbarIcon: '<i class=\"fa fa-puzzle-piece\"></i>',\n\n      // Component types to allow script editing\n      // Avoid components with predefined scripts\n      blocklyTypesSupport: ['default', 'wrapper', 'text', 'textnode', 'image', 'video', 'svg'],\n\n      // Object to extend the default component's toolbar button for the code, eg. `{ label: '</>', attributes: { title: 'Open blockly editor' } }`\n      // Pass a falsy value to avoid adding the button\n      toolbarBtnBlockly: {},\n\n      // On run success\n      onRun: () => console.log('valid syntax'),\n\n      // Logic when there is an error on run\n      onError: err => console.log('error', err),\n\n      // Title for the blockly modal\n      modalTitle: 'Blockly',\n\n      // Additional options for the code viewer, eg. `{ theme: 'hopscotch', readOnly: 0 }`\n      codeViewOptions: {},\n\n      // Label for the default save button\n      buttonLabel: 'Save',\n\n      // Object to extend the default blockly command.\n      // Check the source to see all available methods\n      commandBlocklyScript: {},\n    },\n    ...opts\n  };\n\n\n\n  if (!Blockly) {\n    throw new Error('Blockly instance not found');\n  }\n\n  // set blockly globally\n  biBlocks(Blockly);\n\n  biBlocksJS(Blockly);\n\n  // load commands\n  commands(editor, options);\n};"],"sourceRoot":""}