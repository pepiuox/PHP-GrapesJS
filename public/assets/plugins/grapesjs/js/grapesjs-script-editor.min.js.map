{"version":3,"sources":["webpack://grapesjs-script-editor/webpack/universalModuleDefinition","webpack://grapesjs-script-editor/webpack/bootstrap","webpack://grapesjs-script-editor/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://grapesjs-script-editor/./src/consts.js","webpack://grapesjs-script-editor/./src/commands.js","webpack://grapesjs-script-editor/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","configurable","writable","cmdId","editor","opts","cm","Commands","md","Modal","domc","Components","modalTitle","codeViewOptions","commandAttachScript","toolbarIcon","onRun","onError","starter","scriptTypesSupport","content","appendToContent","target","HTMLElement","appendChild","insertAdjacentHTML","$","isString","split","isArray","includes","getTypes","map","id","forEach","type","typeOpt","getType","model","addType","initToolbar","apply","this","arguments","tb","tbExists","some","item","command","unshift","label","toolbarBtnCustomScript","set","add","run","sender","options","getSelected","showCustomCode","stop","close","title","getContent","code","getScriptString","open","getModel","once","stopCommand","getCodeViewer","setContent","getPreContent","getPostContent","document","createElement","pfx","getConfig","className","codeViewer","refresh","setTimeout","focus","getElement","getContentActions","actions","btn","innerHTML","buttonLabel","onclick","handleSave","runLogic","style","runCode","CodeManager","createViewer","codeName","theme","readOnly","autoBeautify","Function","err","console","log","codeLabel","commands"],"mappings":"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","file":"grapesjs-script-editor.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-script-editor\"] = factory();\n\telse\n\t\troot[\"grapesjs-script-editor\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export const cmdId = 'edit-script';","import {\r\n    cmdId\r\n} from './consts';\r\n\r\nexport default (editor, opts = {}) => {\r\n    const cm = editor.Commands;\r\n    const md = editor.Modal;\r\n    const domc = editor.Components;\r\n    const {\r\n        modalTitle,\r\n        codeViewOptions,\r\n        commandAttachScript,\r\n        toolbarIcon,\r\n        onRun,\r\n        onError,\r\n        starter\r\n    } = opts;\r\n    let scriptTypesSupport = opts.scriptTypesSupport;\r\n\r\n    let content = null;\r\n\r\n    const appendToContent = (target, content) => {\r\n        if (content instanceof HTMLElement) {\r\n            target.appendChild(content);\r\n        } else if (content) {\r\n            target.insertAdjacentHTML('beforeend', content);\r\n        }\r\n    };\r\n\r\n    if (editor.$.isString(scriptTypesSupport)) {\r\n        scriptTypesSupport = scriptTypesSupport.split(',');\r\n    }\r\n\r\n    if (editor.$.isArray(scriptTypesSupport)) {\r\n        scriptTypesSupport = scriptTypesSupport.includes('*') ?\r\n            domc.getTypes().map(c => c.id) : scriptTypesSupport;\r\n    }\r\n\r\n    // Add icons to specified component types\r\n    scriptTypesSupport && scriptTypesSupport.forEach(type => {\r\n        const typeOpt = domc.getType(type).model;\r\n        domc.addType(type, {\r\n            model: {\r\n                initToolbar() {\r\n                    typeOpt.prototype.initToolbar.apply(this, arguments);\r\n                    const tb = this.get('toolbar');\r\n                    const tbExists = tb.some(item => item.command === cmdId);\r\n\r\n                    if (!tbExists) {\r\n                        tb.unshift({\r\n                            command: cmdId,\r\n                            label: toolbarIcon,\r\n                            ...opts.toolbarBtnCustomScript\r\n                        });\r\n                        this.set('toolbar', tb);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    })\r\n\r\n    // Add the script command\r\n    cm.add(cmdId, {\r\n        run(editor, sender, opts = {}) {\r\n            this.editor = editor;\r\n            this.options = opts;\r\n            this.target = opts.target || editor.getSelected();\r\n            const target = this.target;\r\n\r\n            if (target) this.showCustomCode(target);\r\n        },\r\n\r\n        stop(editor) {\r\n            md.close();\r\n        },\r\n\r\n        /**\r\n         * Method which tells how to show the custom code\r\n         * @param  {Component} target\r\n         */\r\n        showCustomCode(target) {\r\n            const { editor, options } = this;\r\n            const title = options.title || modalTitle;\r\n            if (!content) content = this.getContent();\r\n            let code = target.getScriptString() || starter;\r\n            md.open({\r\n                title,\r\n                content\r\n            }).getModel().once('change:open', () => editor.stopCommand(this.id));\r\n            this.getCodeViewer().setContent(code);\r\n        },\r\n\r\n        /**\r\n         * Custom pre-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPreContent() {},\r\n\r\n        /**\r\n         * Custom post-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPostContent() {},\r\n\r\n        /**\r\n         * Get all the content for the custom code\r\n         * @return {HTMLElement}\r\n         */\r\n        getContent() {\r\n            const { editor } = this;\r\n            const content = document.createElement('div');\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            content.className = `${pfx}attach-script`;\r\n            appendToContent(content, this.getPreContent());\r\n            const codeViewer = this.getCodeViewer();\r\n            codeViewer.refresh();\r\n            setTimeout(() => codeViewer.focus(), 0);\r\n            content.appendChild(codeViewer.getElement());\r\n            appendToContent(content, this.getPostContent());\r\n            appendToContent(content, this.getContentActions());\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Get the actions content. Can be a simple string or an HTMLElement\r\n         * @return {HTMLElement|String}\r\n         */\r\n        getContentActions() {\r\n            const { editor } = this;\r\n            const actions = document.createElement('div');\r\n            actions.id = \"actns\";\r\n            const btn = document.createElement('button');\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            btn.innerHTML = opts.buttonLabel;\r\n            btn.className = `${pfx}btn-prim ${pfx}btn-save__inject-logic`;\r\n            btn.onclick = () => this.handleSave();\r\n\r\n            const runLogic = document.createElement('div');\r\n            runLogic.id = \"logic-toolbar\";\r\n            runLogic.className = \"fa fa-bug\";\r\n            runLogic.style = \"margin:5px;padding:10px;background:rgba(0,0,0,0.2);border-radius:3px;border:1px solid rgba(0,0,0,0.2);cursor:pointer\";\r\n            runLogic.onclick = () => this.runCode();\r\n\r\n            actions.appendChild(runLogic);\r\n            actions.appendChild(btn);\r\n\r\n            return actions;\r\n        },\r\n\r\n        /**\r\n         * Handle the main save task\r\n         */\r\n        handleSave() {\r\n            const { editor, target } = this;\r\n            const code = this.getCodeViewer().getContent();\r\n            target.set('script', code);\r\n            editor.Modal.close();\r\n        },\r\n\r\n        /**\r\n         * Return the code viewer instance\r\n         * @return {CodeViewer}\r\n         */\r\n        getCodeViewer() {\r\n            const { editor } = this;\r\n\r\n            if (!this.codeViewer) {\r\n                this.codeViewer = editor.CodeManager.createViewer({\r\n                    codeName: 'javascript',\r\n                    theme: 'hopscotch',\r\n                    readOnly: 0,\r\n                    autoBeautify: 1,\r\n                    ...codeViewOptions,\r\n                });\r\n            }\r\n\r\n            return this.codeViewer;\r\n        },\r\n\r\n        /**\r\n         * Evaluate code syntax\r\n         */\r\n        runCode() {\r\n            //console.log(\"run\")\r\n            try {\r\n                const code = this.getCodeViewer().getContent();\r\n                Function('\"use strict\";' + code)(); // final code\r\n                onRun && onRun();\r\n            } catch (err) {\r\n                console.log(\"error\", err);\r\n                onError && onError(err);\r\n            }\r\n        },\r\n\r\n        ...commandAttachScript,\r\n    });\r\n}","import commands from './commands';\n\nexport default (editor, opts = {}) => {\n    const options = {\n        ...{\n            // Starter code\n            starter: 'let el = this',\n\n            toolbarIcon: '<i class=\"fa fa-file-code-o\"></i>',\n\n            // Component types to allow script editing\n            // Avoid components with predefined scripts\n            scriptTypesSupport: ['default', 'wrapper', 'text', 'textnode', 'image', 'video', 'svg'],\n\n            // Object to extend the default component's toolbar button for the code, eg. `{ label: '</>', attributes: { title: 'Open custom code' } }`\n            // Pass a falsy value to avoid adding the button\n            toolbarBtnCustomScript: {},\n\n            // On run success\n            onRun: () => console.log('valid syntax'),\n\n            // Logic when there is an error on run\n            onError: err => console.log('error', err),\n\n            // Title for the custom code modal\n            modalTitle: 'Script',\n\n            // Textarea label\n            codeLabel: 'JS',\n\n            // Additional options for the code viewer, eg. `{ theme: 'hopscotch', readOnly: 0 }`\n            codeViewOptions: {},\n\n            // Label for the default save button\n            buttonLabel: 'Save',\n\n            // Object to extend the default inject logic command.\n            // Check the source to see all available methods\n            commandAttachScript: {},\n        },\n        ...opts\n    };\n\n    // load commands\n    commands(editor, options);\n};"],"sourceRoot":""}